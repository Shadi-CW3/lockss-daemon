#!/usr/bin/env python3

__copyright__ = '''\
Copyright (c) 2000-2020, Board of Trustees of Leland Stanford Jr. University
All rights reserved.
'''

__license__ = '''\
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
'''

__version__ = '0.3'

import argparse
from datetime import date
import getpass
import os
import subprocess
import sys

# DN defaults
_DEFAULT_DN_O = 'Stanford University'
_DEFAULT_DN_OU = 'LOCKSS Program'
_DEFAULT_DN_L = 'Stanford'
_DEFAULT_DN_S = 'California'
_DEFAULT_DN_C = 'US'

# Other constants
_DEFAULT_STORE_PASS = 'password'
_keytool = os.path.join(os.environ['JAVA_HOME'], 'bin', 'keytool') if 'JAVA_HOME' in os.environ else 'keytool'
_ten_years_from_now_in_days = (date(date.today().year + 10, date.today().month, date.today().day) - date.today()).days

class __GenKeyOptions(object):

    @staticmethod
    def make_parser():
        parser = argparse.ArgumentParser(description='LOCKSS signing key generator')
        parser.add_argument('--version', '-V', action='version', version=__version__)
        parser.add_argument('--copyright', '-C', action='store_true', help='show copyright and exit')
        parser.add_argument('--license', '-L', action='store_true', help='show license and exit')
        # Group: Name
        group = parser.add_argument_group('Name')
        group.add_argument('--full-name', '-f', metavar='FULLNAME', help='full name (default: interactive prompt)')
        group.add_argument('--alias', '-a', metavar='ALIAS', help='alias (default: interactive prompt)')
        # Group: Organization
        group = parser.add_argument_group('Organization')
        group.add_argument('--organization', '-o', metavar='ORG', default=_DEFAULT_DN_O, help='organization (default: %(default)s)')
        group.add_argument('--unit', '-u', metavar='UNIT', default=_DEFAULT_DN_OU, help='organizational unit (default: %(default)s)')
        # Group: Location
        group = parser.add_argument_group('Location')
        group.add_argument('--locality', '-l', metavar='CITY', default=_DEFAULT_DN_L, help='locality (default: %(default)s)')
        group.add_argument('--state', '-s', metavar='STATE', default=_DEFAULT_DN_S, help='state or province (default: %(default)s)')
        group.add_argument('--country', '-c', metavar='XX', default=_DEFAULT_DN_C, help='2-letter ISO 3166 country code (default: %(default)s)')
        # Group: Options
        group = parser.add_argument_group('Options')
        group.add_argument('--import-into', '-i', metavar='KEYSTORE', default='src/org/lockss/plugin/lockss.keystore', help='import the generated certificate into a keystore (default: %(default)s)')
        group.add_argument('--verbose', '-v', action='store_true', help='output keytool commands')
        # Group: Deprecated
        group = parser.add_argument_group('Deprecated', 'These deprecated arguments are kept for backward comptibility and may be removed in a future version.')
        group.add_argument('--full_name', metavar='FULLNAME', dest='full_name', help='deprecated; use --full-name')
        group.add_argument('--name', '-n', metavar='UNIT', dest='unit', default=_DEFAULT_DN_OU, help='deprecated; use --unit')
        # Return parser
        return parser

    def __init__(self, parser, parsed):
        super().__init__()
        # --copyright, --license (--help, --version already taken care of)
        if any([parsed.copyright, parsed.license]):
            if parsed.copyright: print(__copyright__)
            elif parsed.license: print(__license__)
            else: raise RuntimeError('internal error')
            sys.exit()
        # --organization, --unit, --locality, --state, --country
        self.organization = parsed.organization
        self.unit = parsed.unit
        self.locality = parsed.locality
        self.state = parsed.state
        self.country = parsed.country
        # --verbose
        self.verbose = parsed.verbose
        # --import-into
        self.import_into = parsed.import_into
        # --full-name, --alias
        self.full_name = parsed.full_name
        while self.full_name is None or len(self.full_name) == 0:
            try:
                self.full_name = input('Full name (e.g. Firstname Lastname): ')
            except (EOFError, KeyboardInterrupt):
                sys.exit()
        self.alias = parsed.full_name
        while self.alias is None or len(self.alias) == 0:
            try:
                self.alias = input('Alias (e.g. flastname-lockss): ')
            except (EOFError, KeyboardInterrupt):
                sys.exit()
        # Passphrase
        self.passphrase = None
        while self.passphrase is None:
            try:
                _p1 = getpass.getpass('Passphrase: ')
                if len(_p1) < 6:
                    print('Passphrase must have at least 6 characters')
                    continue
                _p2 = getpass.getpass('Confirm passphrase: ')
                if _p1 != _p2:
                    print('Passphrases do not match')
                    continue
                self.passphrase = _p1
            except (EOFError, KeyboardInterrupt):
                sys.exit()

def __display_certificate(options):
    cmd = [_keytool,
           '-printcert',
           '-file', f'{options.alias}.cer']
    __run(options, cmd, output=True)

def __export_certificate(options):
    cmd = [_keytool,
           '-export',
           '-file', f'{options.alias}.cer',
           '-keystore', f'{options.alias}.keystore',
           '-alias', options.alias,
           '-storepass', options.passphrase]
    __run(options, cmd)

def __generate_key(options):
    cmd = [_keytool,
           '-genkeypair',
           '-alias', options.alias,
           '-validity', str((date(date.today().year + 10, date.today().month, date.today().day) - date.today()).days),
           '-keystore', f'{options.alias}.keystore',
           '-storepass', options.passphrase,
           '-keypass', options.passphrase,
           '-dname', ', '.join([f'{k}={v}' for k, v in [('CN', options.full_name),
                                                        ('O', options.organization),
                                                        ('OU', options.unit),
                                                        ('L', options.locality),
                                                        ('S', options.state),
                                                        ('C', options.country)] if v is not None and len(v) > 0])]
    __run(options, cmd)

def __import_certificate(options):
    _p3 = getpass.getpass(f'Passphrase for {options.import_into}: ')
    cmd = [_keytool,
           '-importcert',
           '-keystore', options.import_into,
           '-alias', options.alias,
           '-file', f'{options.alias}.cer',
           '-storepass', _p3]
    __run(options, cmd)

def __run(options, cmd, output=False):
    if options.verbose:
        print(f'Executing: {" ".join(cmd)}')
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    out, err = proc.communicate()
    if options.verbose and err is not None and len(err) > 0:
        print(err, file=sys.stderr)
    if (output or options.verbose) and out is not None and len(out) > 0:
        print(out)
    if proc.returncode != 0:
        print(f'{cmd[0]} exited with {proc.returncode}')
        sys.exit(proc.returncode)

def __main():
    '''Main method.'''
    parser = __GenKeyOptions.make_parser()
    options = __GenKeyOptions(parser, parser.parse_args())
    __generate_key(options)
    __export_certificate(options)
    __display_certificate(options)
    __import_certificate(options)

if __name__ == '__main__': __main()

